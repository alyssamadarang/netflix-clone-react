{"ast":null,"code":"import _regeneratorRuntime from\"/Users/alyssamadarang/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/alyssamadarang/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/alyssamadarang/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React,{useState,useEffect}from\"react\";import axios from\"./axios\";import\"./Row.css\";import YouTube from\"react-youtube\";import movieTrailer from\"movie-trailer\";var base_url=\"https://image.tmdb.org/t/p/original/\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];// A snippet of code which runs based on specific condition/variable\nuseEffect(function(){// everytime row will load, this snippet of code will run\nfunction fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;console.log(request);setMovies(request.data.results);return _context.abrupt(\"return\",request);case 6:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();// if [], run once when the row load (on page load), and don't run again\n// if you have a variable passed from outside the block, [fetchUrl] --> dependency\n},[fetchUrl]);console.log(movies);var opts={height:\"390\",width:\"100%\",playerVars:{// https://developers.google.com/youtube/player_parameters\nautoplay:1}};var handleClick=function handleClick(movie){if(trailerUrl){setTrailerUrl(\"\");}else{movieTrailer((movie===null||movie===void 0?void 0:movie.name)||\"\").then(function(url){var urlParams=new URLSearchParams(new URL(url).search);setTrailerUrl(urlParams.get(\"v\"));}).catch(function(error){return console.log(error);});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row__posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){return handleClick(movie);},className:\"row__poster \".concat(isLargeRow&&\"row__posterLarge\"),src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id);})}),trailerUrl&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts})]});}export default Row;","map":{"version":3,"sources":["/Users/alyssamadarang/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","console","log","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","map","poster_path","backdrop_path","id"],"mappings":"miBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,CAEA,GAAMC,CAAAA,QAAQ,CAAG,sCAAjB,CAEA,QAASC,CAAAA,GAAT,MAA8C,IAA/BC,CAAAA,KAA+B,MAA/BA,KAA+B,CAAxBC,QAAwB,MAAxBA,QAAwB,CAAdC,UAAc,MAAdA,UAAc,eAChBT,QAAQ,CAAC,EAAD,CADQ,wCACrCU,MADqC,eAC7BC,SAD6B,8BAERX,QAAQ,CAAC,EAAD,CAFA,yCAErCY,UAFqC,eAEzBC,aAFyB,eAI5C;AACAZ,SAAS,CAAC,UAAM,CACd;AADc,QAECa,CAAAA,SAFD,qIAEd,qKACwBZ,CAAAA,KAAK,CAACa,GAAN,CAAUP,QAAV,CADxB,QACQQ,OADR,eAEEC,OAAO,CAACC,GAAR,CAAYF,OAAZ,EACAL,SAAS,CAACK,OAAO,CAACG,IAAR,CAAaC,OAAd,CAAT,CAHF,gCAISJ,OAJT,wDAFc,4CAQdF,SAAS,GACT;AACA;AACD,CAXQ,CAWN,CAACN,QAAD,CAXM,CAAT,CAaAS,OAAO,CAACC,GAAR,CAAYR,MAAZ,EAEA,GAAMW,CAAAA,IAAI,CAAG,CACXC,MAAM,CAAE,KADG,CAEXC,KAAK,CAAE,MAFI,CAGXC,UAAU,CAAE,CACV;AACAC,QAAQ,CAAE,CAFA,CAHD,CAAb,CASA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC7B,GAAIf,UAAJ,CAAgB,CACdC,aAAa,CAAC,EAAD,CAAb,CACD,CAFD,IAEO,CACLT,YAAY,CAAC,CAAAuB,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAEC,IAAP,GAAe,EAAhB,CAAZ,CACGC,IADH,CACQ,SAACC,GAAD,CAAS,CACb,GAAMC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,eAAJ,CAAoB,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB,CACArB,aAAa,CAACkB,SAAS,CAAChB,GAAV,CAAc,GAAd,CAAD,CAAb,CACD,CAJH,EAKGoB,KALH,CAKS,SAACC,KAAD,QAAWnB,CAAAA,OAAO,CAACC,GAAR,CAAYkB,KAAZ,CAAX,EALT,EAMD,CACF,CAXD,CAaA,mBACE,aAAK,SAAS,CAAC,KAAf,wBACE,oBAAK7B,KAAL,EADF,cAGE,YAAK,SAAS,CAAC,cAAf,UACGG,MAAM,CAAC2B,GAAP,CAAW,SAACV,KAAD,qBACV,YAEE,OAAO,CAAE,yBAAMD,CAAAA,WAAW,CAACC,KAAD,CAAjB,EAFX,CAGE,SAAS,uBAAiBlB,UAAU,EAAI,kBAA/B,CAHX,CAIE,GAAG,WAAKJ,QAAL,SACDI,UAAU,CAAGkB,KAAK,CAACW,WAAT,CAAuBX,KAAK,CAACY,aADtC,CAJL,CAOE,GAAG,CAAEZ,KAAK,CAACC,IAPb,EACOD,KAAK,CAACa,EADb,CADU,EAAX,CADH,EAHF,CAgBG5B,UAAU,eAAI,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAES,IAApC,EAhBjB,GADF,CAoBD,CAED,cAAef,CAAAA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  // A snippet of code which runs based on specific condition/variable\n  useEffect(() => {\n    // everytime row will load, this snippet of code will run\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      console.log(request);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n    // if [], run once when the row load (on page load), and don't run again\n    // if you have a variable passed from outside the block, [fetchUrl] --> dependency\n  }, [fetchUrl]);\n\n  console.log(movies);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    },\n  };\n\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n\n      <div className=\"row__posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}